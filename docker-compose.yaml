version: '3.8'

services:
  neo4j:
    image: neo4j:5.24.1-enterprise
    volumes:  
        - ./logs:/logs
        - ./data:/data
        - ./import:/var/lib/neo4j/import
    environment:
        - NEO4J_AUTH=${NEO4J_AUTH}
        - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    ports:
      - "7474:${NEO4J_HTTP_PORT}"
      - "7687:${NEO4J_BOLT_PORT}"
    command: >
      bash -c "
        if [ ! -f /var/lib/neo4j/data/neostore.db ]; then
          neo4j-admin database load ${NEO4J_DATABASE} --from-path=/var/lib/neo4j/import
        fi
        neo4j console
      "
  airflow-web:
    image: apache/airflow:2.10.2
    restart: always
    command: webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB_NAME}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8080:${AIRFLOW_HTTP_PORT}"
    volumes:
      - ./dags:/usr/local/airflow/dags
    depends_on:
      - postgres

  airflow-sheduler:
    image: apache/airflow:2.10.2
    restart: always
    command: scheduler
    volumes:
      - ./dags:/usr/local/airflow/dags
      - ./airflow-logs:/usr/local/airflow/logs
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB_NAME}
    depends_on:
      - postgres

  airflow-init:
    image: apache/airflow:2.10.2
    command: bash -c "airflow db init && airflow users create ${AIRFLOW_USER}"
    volumes:
      - ./dags:/usr/local/airflow/dags
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB_NAME}
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    
volumes:
  postgres_data: